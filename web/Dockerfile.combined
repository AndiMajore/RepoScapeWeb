FROM node:latest as build-stage
WORKDIR /app
COPY frontend/package*.json ./
RUN npm install
COPY frontend/ .
COPY frontend/docker/Config.js src/Config.js

RUN npm run build

FROM andimajore/nedrex_repo:server_base as production-stage

ENV PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3.8/dist-packages/
ENV PYTHON=/usr/bin/python3
ENV JAVA_HOME=/usr/app/jdk-15.0.1
ENV PATH=$PATH:$JAVA_HOME/bin

RUN mkdir scripts cache
WORKDIR /usr/app/scripts
COPY backend/scripts* .

RUN pipreqs ./
RUN cat requirements.txt | grep -v "graph_tool" > reqs.txt
RUN pip3 install -r reqs.txt
RUN pip3 uninstall -y networkx
RUN pip3 install networkx==2.3

WORKDIR /usr/app

COPY backend/scripts/wait-for-it.sh wait-for-it.sh

RUN wget https://ftp-stud.hs-esslingen.de/pub/Mirrors/ftp.apache.org/dist/tomcat/tomcat-8/v8.5.63/bin/apache-tomcat-8.5.63.tar.gz
RUN tar -xzf apache-tomcat-8.5.63.tar.gz
RUN rm apache-tomcat-8.5.63.tar.gz
RUN mv apache-tomcat-8.5.63 apache-tomcat

COPY backend/config/db_config.json config/db/
COPY backend/src/main/resources/application-prod.properties config/server/
RUN mkdir cache

WORKDIR apache-tomcat

RUN rm -rf webapps/*
COPY --from=build-stage /app/dist webapps/nedrex/
COPY frontend/docker/WEB-INF webapps/nedrex/WEB-INF


RUN mkdir -p webapps2/backend
WORKDIR webapps2/backend
COPY backend/target/nedrexweb-backend.war ./
RUN unzip nedrexweb-backend.war
RUN rm nedrexweb-backend.war
WORKDIR ../../

COPY docker/static/conf/* conf/

#EXPOSE 8080
#EXPOSE 8090

ENTRYPOINT ../wait-for-it.sh nedrex-db:3306 -t 30 -- bin/catalina.sh run
