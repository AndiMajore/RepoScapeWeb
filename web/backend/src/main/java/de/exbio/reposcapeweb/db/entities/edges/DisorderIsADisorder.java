package de.exbio.reposcapeweb.db.entities.edges;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonSetter;
import de.exbio.reposcapeweb.db.entities.RepoTrialEdge;
import de.exbio.reposcapeweb.db.entities.ids.PairId;
import de.exbio.reposcapeweb.utils.Pair;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.Transient;
import java.io.Serializable;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;


/**
 * Entity class for the RepoTrial edge "DisorderIsADisorder" (disorder_is_a_disorder in db).
 * The attributes primaryDomainIds of {@link DisorderIsADisorder#sourceDomainId} and {@link DisorderIsADisorder#targetDomainId} contain the ids of the sepcific {@link de.exbio.reposcapeweb.db.entities.nodes.Disorder} (source) being a subtype of another {@link de.exbio.reposcapeweb.db.entities.nodes.Disorder} (target).
 * These primaryDomainIds from RepoTrial are converted to numeric node ids autogenerated on insertion of the nodes into the db.
 * Further the "type" attribute is also not included in the database, having only one possible value.
 * The class extends the {@link RepoTrialEdge} abstract class, for some methods used during import of the different RepoTrial entities.
 *
 * @author Andreas Maier
 */
@Entity
@Table(name = "disorder_is_a_disorder")
public class DisorderIsADisorder extends RepoTrialEdge implements Serializable {

    @Transient
    @JsonIgnore
    private final Logger log = LoggerFactory.getLogger(DisorderIsADisorder.class);

    @JsonIgnore
    @EmbeddedId
    private PairId id;

    @Transient
    @JsonIgnore
    public final static HashSet<String> attributes = new HashSet<>(Arrays.asList("targetDomainId", "sourceDomainId", "type"));

    @Transient
    private String targetDomainId;
    @Transient
    private String sourceDomainId;


    public static String[] getListAttributes() {
        return new String[]{"sourceId","targetId"};
    }

    @Override
    public HashMap<String, String> getAsMap() {
        HashMap<String,String> values = new HashMap<>();
        values.put("targetDomainId",targetDomainId);
        values.put("sourceDomainId",sourceDomainId);
        values.put("targetId",id.getId1()+"");
        values.put("sourceId",id.getId2()+"");
        values.put("type",getType());
        return values;
    }

    @Override
    public HashMap<String, String> getAsMap(HashSet<String> attributes) {
        HashMap<String,String> values = new HashMap<>();
        getAsMap().forEach((k,v)->{
            if(attributes.contains(k))
                values.put(k,v);
        });
        return values;
    }

    public DisorderIsADisorder() {
    }

    public String getTargetDomainId() {
        return targetDomainId;
    }

    public String getSourceDomainId() {
        return sourceDomainId;
    }

    @JsonGetter
    public String getType() {
        return "DisorderIsADisorder";
    }

    @JsonSetter
    public void setType(String type) {
    }


    public void setValues(DisorderIsADisorder other) {
        this.sourceDomainId = other.sourceDomainId;
        this.targetDomainId = other.targetDomainId;
    }

    @Override
    public PairId getPrimaryIds() {
        return id;
    }

    public void setId(PairId id) {
        this.id = id;
    }

    @Override
    public Pair<String, String> getIdsToMap() {
        return new Pair<>(sourceDomainId, targetDomainId);
    }

}
